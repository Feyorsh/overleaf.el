:PROPERTIES:
:ID:       9d694771-66a1-46dc-873a-858289333e3d
:END:
#+title: Overleaf.el

#+HTML: <img src="./assets/overleaf-el-logo.svg" align="right" style="height: 150px;">

# MELPA badge image.
[[https://melpa.org/#/overleaf][file:https://melpa.org/packages/overleaf-badge.svg]]

This packages provides ~overleaf-mode~ that allows to
live-edit $\LaTeX$ files on [[https://github.com/overleaf/overleaf][overleaf]].

*Simultaneous edits from multiple sources are now supported but probably not entirely bug free. However, the worst thing that can happen is that people on overleaf might get an "out of sync" message and have to reload the page.*

/Note that active development happens on the ~dev~ branch./ Changes are rebased into ~main~ if they're unlikely to break things too badly. If you want to use the most "stable" version, the tagged versions (c.f. MELPA stable) are the place to go.

* Demo
[[file:assets/demo.gif]]

* Installation
To use this package, you can clone the repo, make it available in you
load path and ~(require 'overleaf)~. You can also use
~use-package~:
#+begin_src elisp
  (use-package overleaf
    :custom
    (overleaf-use-nerdfont t "Use nerfont icons for the modeline.")
    :config
    ;; Example: load/save cookies from GPG encrypted file.
    ;;          (remove the .gpg extension to save unencrypted)
    (let ((cookie-file "~/.overleaf-cookies.gpg"))
      (setq overleaf-save-cookies
            (overleaf-save-cookies-to-file cookie-file))
      (setq overleaf-cookies
            (overleaf-read-cookies-from-file cookie-file))))
#+end_src

* Setting Up
** Getting the Session Cookies
First, there are the session cookies which can be obtained either
through executing the command ~M-x overleaf-authenticate~ or through the
developer tools in your favorite browser.

For the former option the [[https://github.com/mozilla/geckodriver][Mozilla gecko driver]] must be installed and
the variable ~overleaf-save-cookies~ must be set to a function that
receives a string containing the cookies and saving it either directly
into ~overleaf-cookies~ via ~setq~ (that's the default) or stores it by
some other means. In the latter case the variable ~overleaf-cookies~
must be assigned a function that returns the cookie string. For
example, the cookies can be stored and loaded from a =gpg= encrypted
file:
#+begin_src elisp
  (let ((cookie-file "~/.overleaf-cookies.gpg"))
      (setq overleaf-save-cookies
            (overleaf-save-cookies-to-file cookie-file))
      (setq overleaf-cookies
            (overleaf-read-cookies-from-file cookie-file)))
#+end_src


If the above doesn't work for you, simply open the overleaf document
you want to edit and enable network monitoring. Select any request
made to the overleaf domain and get the contents of the =Cookie= request
header. It should have contents like:
#+begin_src text
  overleaf_session2=[redacted]; __stripe_mid=[redacted]; GCLB=[redacted]; __stripe_sid=redacted
#+end_src

Then set ~overleaf-cookies~ to the cookies string
#+begin_src elisp
  (setq overleaf-cookies
        "((\"[overleaf domail (ovelerleaf.com)]\" \"overleaf_session2=[redacted]; __stripe_mid=[redacted]; GCLB=[redacted]; __stripe_sid=redacted\" [expiry time or nil]))")
#+end_src
or store the cookies by any means you'd like (see above) and set
~overleaf-cookies~ to a function that returns the cookie string. The
cookie domain should only contain the part just before the TLD and the
TLD. For example =www.overleaf.com= becomes =overleaf.com= (I don't make
the rules...).

** Project ID and Document ID
Once the cookies are set, visit a buffer that you would like to sync
with overleaf (this buffer will be cleared). This buffer may or may
not be backed by a file. Calling ~overleaf-connect~ will connect this
buffer to overleaf. If the buffer does not contain buffer local
variables that set the document id and project id you will be prompted
to enter those. They will subsequently written to the buffer as
buffer-local variables. It is therefore advisable to save this buffer
so that re-connection is simplified at later times. *The contents of
the buffer will be overwritten by the contents of the file on overleaf
and the undo history will be reset.*

Again, there are two ways to obtain the ~document-id~ and ~project-id~.
First ~M-x overleaf-find-file~ will use the [[https://github.com/mozilla/geckodriver][Mozilla gecko driver]] to
automatically obtain the values. *Make sure that you have the file you
want to edit in emacs opened in overleaf* if choosing this options.

Otherwise, the ids can be easily obtained by downloading the file to
be edited from overleaf and inspecting the download URL which is of
the form
#+begin_src text
https://[overleaf-domain]/project/[project-id]
#+end_src

* Usage
After having set things up, just use ~overleaf-connect~ or
~overleaf-find-file~ to connect to overleaf (either from an empty
buffer, or in a buffer with the appropriate file-local variables set
from a previous session).

The overleaf instance can be customized by changing the ~overleaf-url~
variable.

Calling ~overleaf-toggle-track-changes~ toggles whether the edits made
in emacs will tracked (highlighted) by overleaf.

Calling ~overleaf-disconnect~ disconnects the current buffer from overleaf.

The modeline will indicate the connection status, as well as the
number of changes that have yet to be synced to overleaf and whether the track-changes feature is enabled: ~(O: <connection status>, <number of changes>, <track changes status>)~.

Calling ~overleaf-toggle-auto-save~ toggles auto-saving the buffer whenever a consistent state with overleaf is reached.

With ~overleaf-goto-cursor~ one can jump to the cursor of another user.

** Nicer modeline icons
If you have a font with nerd-font symbol support you can set:
#+begin_src emacs-lisp
    (setopt overleaf-use-nerdfont t)
#+end_src


** Keybindings
The keymap prefix can be customized with ~overleaf-keymap-prefix~ which defaults to ~C-c C-o~.

The available keybindings
  - =[prefix] c= - (re)-connect
  - =[prefix] d= - disconnect
  - =[prefix] t= - toggle track-changes
  - =[prefix] s= - toggle auto-save
  - =[prefix] b= - browse project
  - =[prefix] b= - go to the cursor of another user

* Troubleshooting
Rather verbose logging may be enabled by setting ~overleaf-debug~ to ~t~.
The log message will be collected in a buffer =*overleaf-[document-id]*=.

Feel free to open an issue providing this log.

* To-do
** TODO detect faulty document id
